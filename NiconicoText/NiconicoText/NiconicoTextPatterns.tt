<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>


namespace NiconicoText
{
	

    public static partial class NiconicoTextPatterns
    {

		

        <#
			var patterns = new Dictionary<string,string>();
			patterns.Add("communityId",@"co\d{1,14}");
			patterns.Add("channelId",@"ch\d{1,14}");
			patterns.Add("videoId",@"(?:sm|nm|so|ca|ax|yo|nl|ig|na|cw|z[a-e]|om|sk|yk)\d{1,14}");
			patterns.Add("articleId",@"ar\d{1,14}");
			patterns.Add("materialId",@"nc\d{1,14}");
			patterns.Add("marketItemId",@"(?:dw\d+|az[A-Z0-9]{10}|ys[a-zA-Z0-9-]+_[a-zA-Z0-9-]|ga\d+|ip[\d_]+|gg[a-zA-Z0-9]+-[a-zA-Z0-9-]+)");
			patterns.Add("liveId",@"lv\d{1,14}");
			patterns.Add("watchStillImageId",@"(?:[sm]g|im)\d{1,14}");
			patterns.Add("stillImageId",@"im\d{1,14}");
			patterns.Add("url",@"https?://[\w/:%#\$&\?\(\)~\.=\+\-]+");
			patterns.Add("htmlAnchor",@"<[aA]\s+?.*?href=\""""""+""(?<href>"" + " + "urlPattern" + @"+"")""+@""\""""\s*?.*?>(?<anchorText>.*?)</[aA]\s*?>");
			patterns.Add("htmlFont",@"<(?i:font)\s+?(?:(?:(?i:color)=\""""(?<color>#?[a-zA-Z0-9]+)|(?i:size)=\""""(?<size>[0-9]+?))\""""\s*?)*?>(?<fontText>.*?)</(?i:font)\s*?>");
			patterns.Add("numberAnchor",@">>[0-9]+?(-[0-9]+?)?");
			patterns.Add("lineBreak",@"(?:\r?\n|<(?i:br)\s*?/?>)");
			patterns.Add("htmlBold",@"<[bB]\s*?>(?<boldText>.*?)</[bB]\s*?>");
			patterns.Add("htmlItalic",@"<[iI]\s*?>(?<italicText>.*?)</[iI]\s*?>");
			patterns.Add("htmlStrike",@"<[sS]\s*?>(?<strikeText>.*?)</[sS]\s*?>");
			patterns.Add("htmlUnderLine",@"<[uU]\s*?>(?<underLineText>.*?)</[uU]\s*?>");
			patterns.Add("invalidHtmlElement",@"</?.*?>");
			foreach(var pattern in patterns)
			{

				var patternName = char.ToUpper( pattern.Key[0]) + pattern.Key.Substring(1,pattern.Key.Length - 1) + "Pattern";

				var privatePaternName = char.ToLower(patternName[0]) + patternName.Substring(1,patternName.Length - 1);

				var gruopKeyName = pattern.Key + "GroupPattern";

				var paatternKeyName = pattern.Key + "KeyName";
		#>

		internal const string <#= privatePaternName #> = <#= "@\"" + pattern.Value + "\"" #> ;

		internal const string <#= paatternKeyName #> = "<#= pattern.Key #>";

		internal const string <#= gruopKeyName #> = "(?<" + <#= paatternKeyName   #> + ">" +  <#= privatePaternName #> + ")";

		<#
			}
		#>



    }
}
